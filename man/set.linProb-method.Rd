% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generics_linProb.r, R/methods_class_linProb.r
\docType{methods}
\name{set.linProb}
\alias{set.linProb}
\alias{set.linProb,linProb,character,list-method}
\title{change \code{linProb}-objects depending on argument \code{type}}
\usage{
set.linProb(object, type, input)

\S4method{set.linProb}{linProb,character,list}(object, type, input)
}
\arguments{
\item{object}{an object of class \code{linProb}}

\item{type}{a character vector of length 1 defining what to calculate|return|modify. Allowed types are:}
\itemize{
\item objective: change coefficients of the objective
\item direction: change vector of direction of the constraints
\item rhs: change vector of right hand side of the constraints
\item types: change vector of bounds of the objective variables
\item bounds: change bounds of the objective variables
\item constraints: change constraint matrix
\item removeCompleteConstraint: remove a specific constraint from the object
\item addCompleteConstraint: add a constraint to the object}

\item{input}{a list depending on argument \code{type}.}
\itemize{
\item type==objective: a list of length 1
\itemize{
\item first element: numeric vector defining coefficients of the objective }
\item type==direction: a list of length 1
\itemize{
\item first element: character vector defining direction of the constraints }
\item type==rhs: a list of length 1
\itemize{
\item first element: numeric vector defining right hand side of the constraints }
\item type==types: a list of length 1
\itemize{
\item first element: character vector defining types of objective variables}
\item type==bounds: a list of length 2
\itemize{
\item element 'lower': a list with the first element containing indices and the second element containing corrsponding lower bounds
\item element 'upper': a list with the first element containing indices and the second element containing corrsponding upper bounds }
\item type==constraints: a list of length 1
\itemize{
\item first element: an object of class \code{simpleTriplet}}
\item type==removeCompleteConstraint: a list of length 1
\itemize{
\item first element: numeric vector of length 1 defining the index of the constraint that should be removed }
\item type==addCompleteConstraint: a list of length 1
\itemize{
\item first element: an object of class \code{cutList} defining the constraint that should be added}}
}
\value{
an object of class \code{linProb}
}
\description{
change \code{linProb}-objects depending on argument \code{type}
}
\note{
internal function
}
\author{
Bernhard Meindl \email{bernhard.meindl@statistik.gv.at}
}
